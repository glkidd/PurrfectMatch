{"ast":null,"code":"import { SUCCESS_STORY_PAGE_SIZE } from \"./Definitions\";\n/*\n    This class is used for whenever we need to get data from the server. \n*/\n\nexport class Api {}\n\nApi.getSuccessStories = breakpoint => {\n  // The call to the server itself will be paginated, so which page of stories we want.\n  // No value = first page. \n  if (breakpoint === undefined) {\n    breakpoint = 0;\n  } // This is pretty much all temporary code that will be replaced when we actually communicate with the server. \n\n\n  const ALL_SUCCESS_STORIES = [{\n    image: \"cat.jpg\",\n    name: \"Mittens\",\n    age: 4,\n    storyText: \"Some story about how this cat was saved from horrible living conditions and is doing much better now.\"\n  }, {\n    image: \"Cat_1.png\",\n    name: \"Fluffy\",\n    age: 36,\n    storyText: \"Another success story here\"\n  }, {\n    image: \"Dog_1.png\",\n    name: \"Mr. Woof\",\n    age: 60,\n    storyText: \"Okay, success stories really should be longer but eh. \"\n  }];\n  let fakeApiResult = ALL_SUCCESS_STORIES.slice(SUCCESS_STORY_PAGE_SIZE * breakpoint, SUCCESS_STORY_PAGE_SIZE * breakpoint + SUCCESS_STORY_PAGE_SIZE);\n  return Promise.resolve(fakeApiResult);\n};\n\nApi.submitContactInfo = (firstName, lastName, subject, email, shelterEmployee, message) => {\n  // Normally, we'd actually submit to the backend and resolve or reject the promise based off of the response (was there an error submitting?)\n  return Promise.resolve();\n};","map":{"version":3,"sources":["/Users/ajjiro/Desktop/PurrfectMatchGit/PurrfectMatch/purrfect-match/src/Api.tsx"],"names":["SUCCESS_STORY_PAGE_SIZE","Api","getSuccessStories","breakpoint","undefined","ALL_SUCCESS_STORIES","image","name","age","storyText","fakeApiResult","slice","Promise","resolve","submitContactInfo","firstName","lastName","subject","email","shelterEmployee","message"],"mappings":"AAAA,SAA2BA,uBAA3B,QAA0D,eAA1D;AAEA;;;;AAGA,OAAO,MAAMC,GAAN,CAAU;;AAAJA,G,CACKC,iB,GAAqBC,UAAD,IAAsD;AACpF;AACA;AACA,MAAIA,UAAU,KAAKC,SAAnB,EAA8B;AAC1BD,IAAAA,UAAU,GAAG,CAAb;AACH,GALmF,CAOpF;;;AACA,QAAME,mBAAuC,GAAG,CAC5C;AACIC,IAAAA,KAAK,EAAE,SADX;AAEIC,IAAAA,IAAI,EAAE,SAFV;AAGIC,IAAAA,GAAG,EAAE,CAHT;AAIIC,IAAAA,SAAS,EAAE;AAJf,GAD4C,EAO5C;AACIH,IAAAA,KAAK,EAAE,WADX;AAEIC,IAAAA,IAAI,EAAE,QAFV;AAGIC,IAAAA,GAAG,EAAE,EAHT;AAIIC,IAAAA,SAAS,EAAE;AAJf,GAP4C,EAa5C;AACIH,IAAAA,KAAK,EAAE,WADX;AAEIC,IAAAA,IAAI,EAAE,UAFV;AAGIC,IAAAA,GAAG,EAAE,EAHT;AAIIC,IAAAA,SAAS,EAAE;AAJf,GAb4C,CAAhD;AAqBA,MAAIC,aAAa,GAAGL,mBAAmB,CAACM,KAApB,CAA0BX,uBAAuB,GAAGG,UAApD,EAAgEH,uBAAuB,GAAGG,UAA1B,GAAuCH,uBAAvG,CAApB;AACA,SAAOY,OAAO,CAACC,OAAR,CAAgBH,aAAhB,CAAP;AACH,C;;AAhCQT,G,CAkCKa,iB,GAAoB,CAACC,SAAD,EAAoBC,QAApB,EAAsCC,OAAtC,EAAuDC,KAAvD,EAAsEC,eAAtE,EAA+FC,OAA/F,KAAkI;AAChK;AACA,SAAOR,OAAO,CAACC,OAAR,EAAP;AACH,C","sourcesContent":["import { SuccessStoryInfo, SUCCESS_STORY_PAGE_SIZE } from \"./Definitions\";\n\n/*\n    This class is used for whenever we need to get data from the server. \n*/\nexport class Api {\n    public static getSuccessStories = (breakpoint?: number): Promise<SuccessStoryInfo[]> => {\n        // The call to the server itself will be paginated, so which page of stories we want.\n        // No value = first page. \n        if (breakpoint === undefined) {\n            breakpoint = 0;\n        }\n\n        // This is pretty much all temporary code that will be replaced when we actually communicate with the server. \n        const ALL_SUCCESS_STORIES: SuccessStoryInfo[] = [\n            {\n                image: \"cat.jpg\",\n                name: \"Mittens\",\n                age: 4,\n                storyText: \"Some story about how this cat was saved from horrible living conditions and is doing much better now.\"\n            },\n            {\n                image: \"Cat_1.png\",\n                name: \"Fluffy\",\n                age: 36,\n                storyText: \"Another success story here\"\n            },\n            {\n                image: \"Dog_1.png\",\n                name: \"Mr. Woof\",\n                age: 60,\n                storyText: \"Okay, success stories really should be longer but eh. \"\n\n            }\n        ];\n        let fakeApiResult = ALL_SUCCESS_STORIES.slice(SUCCESS_STORY_PAGE_SIZE * breakpoint, SUCCESS_STORY_PAGE_SIZE * breakpoint + SUCCESS_STORY_PAGE_SIZE);\n        return Promise.resolve(fakeApiResult);\n    }\n\n    public static submitContactInfo = (firstName: string, lastName: string, subject: string, email: string, shelterEmployee: string, message: string): Promise<void> => {\n        // Normally, we'd actually submit to the backend and resolve or reject the promise based off of the response (was there an error submitting?)\n        return Promise.resolve();\n    }\n}"]},"metadata":{},"sourceType":"module"}